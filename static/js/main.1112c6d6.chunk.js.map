{"version":3,"sources":["debug.js","App.js","serviceWorker.js","index.js"],"names":["debug","_console","_len","arguments","length","args","Array","_key","console","log","apply","concat","mapboxgl","window","LngLat","lng","lat","minus","lngLat1","lngLat2","add","scans","1910","url","corners","1979-baldwin","fullUrl","partUrl","feature","_ref","_ref2","Object","slicedToArray","type","properties","geometry","coordinates","McCone_Hall","mapboxOptions","container","zoom","minZoom","maxZoom","style","version","sources","raster-tiles","tiles","tileSize","layers","id","source","minzoom","maxzoom","maxBounds","customAttribution","center","debugMode","location","hostname","App","_this","map","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","imageOverlayAdded","state","lastMarkerUpdate","currentOverlaySourceName","addSource","scanId","setImageOverlay","addLayer","paint","raster-opacity","setImage","scan","Error","currentSource","setMarkers","markers","setLngLat","updateCornersAutomated","updateCorners","force","automated","Date","now","setTimeout","getSource","setCoordinates","calculateBorders","updateScan","cornerId","lngLat","getLngLat","m0","m1","m2","m3","setData","features","setupMap","Marker","draggable","color","on","addTo","data","line-color","line-opacity","line-width","e","setPaintProperty","boxZoom","disable","addControl","NavigationControl","AttributionControl","compact","Map","react_default","a","createElement","className","Component","Boolean","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1112c6d6.chunk.js","sourcesContent":["export default function(...args) {\n  // Explicitly say [Local debugger] to let people know this is just for debugging and not tracking\n  console.log('[Local debugger]',...args);\n}\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport debug from './debug';\nimport './mapbox-gl.css';\nconst mapboxgl = window.mapboxgl\n\n\n\n// Ohhh ... HAHAHHA ... funny ... :( lat and lng are \"inverted\" in mapbox\n// Always use these utility functions\nconst LatLng = (lat, lng) => [lng, lat];\nconst LngLat = (lng, lat) => [lng, lat];\nconst minus = (lngLat1, lngLat2) => [lngLat1[0]-lngLat2[0], lngLat1[1]-lngLat2[1]]\nconst add = (lngLat1, lngLat2) => [lngLat1[0]+lngLat2[0], lngLat1[1]+lngLat2[1]]\n\nlet scans = {\n  '1910': {url:'./compressed-maps/1910-smaller.jpg', corners: [[-122.25368381624293,37.87666271788129], [-122.25205864680986,37.8690054551667], [-122.26567321115618,37.867273073426304], [-122.26725246910868,37.87479602627526],]},\n  '1979-baldwin': {url:'./compressed-maps/1979-baldwin.jpg', corners: [[-122.27246573870457,37.87077721085865], [-122.25556530361206,37.88257575090472], [-122.2441424865603,37.87273856363721], [-122.26074299964147,37.86081212396496],]},\n};\n\nconst fullUrl = partUrl => partUrl;\n\nconst feature = ([fromLngLat, toLngLat]) => ({\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"LineString\",\n    \"coordinates\": [\n      fromLngLat,\n      toLngLat,\n    ]\n  },\n});\n\n\n// Thank you, Earth Science & Map Library <3\nconst McCone_Hall = LatLng(37.873931, -122.259491)\n\nconst mapboxOptions = {\n  container: 'map', // container id\n  zoom: 13,\n  minZoom: 11,\n  maxZoom: 18,\n  style: {\n    \"version\": 8,\n    \"sources\": {\n      \"raster-tiles\": {\n        \"type\": \"raster\",\n        \"tiles\": [\n          \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n          // \"http://b.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        ],\n        \"tileSize\": 128\n      }\n    },\n    \"layers\": [{\n      \"id\": \"simple-tiles\",\n      \"type\": \"raster\",\n      \"source\": \"raster-tiles\",\n      \"minzoom\": 0,\n      \"maxzoom\": 24\n    }]\n  },\n\n  maxBounds: [LngLat(-122.552, 37.673), LngLat(-122.0467, 37.987)],\n\n  // Attribution from: http://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer?f=pjson\n  customAttribution: 'Satellite map source: Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community',\n  center: McCone_Hall,\n}\n\nconst debugMode = window.location.hostname === 'localhost'\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.imageOverlayAdded = false;\n    this.sources = {}; // Doesn't actually get you the source\n    this.state = {\n    }\n\n    let map;\n    this.lastMarkerUpdate = 0;\n\n    this.currentOverlaySourceName = null;\n\n\n    this.addSource = (scanId, coordinates) => {\n      if (!this.sources[scanId]) {\n        this.sources[scanId] = this.map.addSource(scanId, {\n          type: 'image',\n          url: fullUrl(scans[scanId].url),\n          coordinates: scans[scanId].corners,\n        });\n      }\n    }\n\n    this.setImageOverlay = (scanId) => {\n      if (!this.imageOverlayAdded) {\n        this.imageOverlayAdded = true;\n        this.currentOverlaySourceName = scanId;\n\n        this.map.addLayer({\n          \"id\": \"imageOverlay\",\n          \"source\": scanId,\n          \"type\": \"raster\",\n          \"paint\": {\n            \"raster-opacity\": 0.8\n          },\n        });\n      } else {\n        // this.map.addLayer({\n        //   \"id\": \"imageOverlay\",\n        //   \"source\": \"myImageSource\",\n        //   \"type\": \"raster\",\n        //   \"paint\": {\n        //     \"raster-opacity\": 0.95\n        //   },\n        // });\n      }\n    }\n\n    this.setImage = scanId => {\n      const scan = scans[scanId];\n      if (!scan) {\n        throw new Error('Scan doesnt exist:', scanId);\n      }\n      this.currentSource = scanId;\n      this.addSource(scanId, scan.corners);\n      this.setImageOverlay(scanId);\n\n      this.setMarkers(scan.corners);\n    }\n    this.setMarkers = (corners) => {\n      if (!debugMode) return;\n      this.markers[0].setLngLat(corners[0])\n      this.markers[1].setLngLat(corners[1])\n      this.markers[2].setLngLat(corners[2])\n      this.markers[3].setLngLat(corners[3])\n    }\n\n    this.updateCornersAutomated = () => {\n      this.updateCorners(false, true);\n    }\n    this.updateCorners = (force, automated) => {\n      if (this.currentSource == null) {\n        return;\n      }\n\n      // Debounce or else we will consistently crash\n      if (!force && Date.now() - this.lastMarkerUpdate < 300) {\n        if (!automated) {\n          setTimeout(this.updateCornersAutomated, 300 - Date.now() - this.lastMarkerUpdate + 2);\n        }\n        return;\n      }\n      this.lastMarkerUpdate = Date.now();\n\n      let source = this.map.getSource(this.currentOverlaySourceName);\n      let scan = scans[this.currentOverlaySourceName];\n\n      source.setCoordinates(scan.corners);\n      console.log(`'${this.currentOverlaySourceName}': {url:'${scan.url}', corners: [[${scan.corners[0][0]},${scan.corners[0][1]}], [${scan.corners[1][0]},${scan.corners[1][1]}], [${scan.corners[2][0]},${scan.corners[2][1]}], [${scan.corners[3][0]},${scan.corners[3][1]}],]},`)\n      this.calculateBorders();\n    }\n    this.updateScan = (cornerId, lngLat, force) => {\n      if (this.currentSource == null) {\n        return;\n      }\n\n      let source = this.map.getSource(this.currentOverlaySourceName);\n      let scan = scans[this.currentOverlaySourceName];\n      if (!source || !scan) {\n        console.log('Something was empty',source,scan)\n        return;\n      }\n\n      scan.corners[0] = [this.markers[0].getLngLat().lng, this.markers[0].getLngLat().lat];\n      scan.corners[1] = [this.markers[1].getLngLat().lng, this.markers[1].getLngLat().lat];\n      scan.corners[2] = [this.markers[2].getLngLat().lng, this.markers[2].getLngLat().lat];\n      scan.corners[3] = [this.markers[3].getLngLat().lng, this.markers[3].getLngLat().lat];\n      this.updateCorners(force);\n    }\n\n    this.calculateBorders = () => {\n      if (!debugMode) return;\n      let m0 = [this.markers[0].getLngLat().lng, this.markers[0].getLngLat().lat];\n      let m1 = [this.markers[1].getLngLat().lng, this.markers[1].getLngLat().lat];\n      let m2 = [this.markers[2].getLngLat().lng, this.markers[2].getLngLat().lat];\n      let m3 = [this.markers[3].getLngLat().lng, this.markers[3].getLngLat().lat];\n      let sourceTB = this.map.getSource('borderTB');\n      sourceTB.setData({\n        \"type\": \"FeatureCollection\",\n        \"features\": [\n          feature([\n            m2,\n            add(m2,minus(m0, m1)),\n          ]),\n          feature([\n            m3,\n            add(m3,minus(m1, m0)),\n          ]),\n          feature([\n            m0,\n            add(m0,minus(m2, m3)),\n          ]),\n          feature([\n            m1,\n            add(m1,minus(m3, m2)),\n          ]),\n        ]\n      });\n      let sourceLR = this.map.getSource('borderLR');\n      sourceLR.setData({\n        \"type\": \"FeatureCollection\",\n        \"features\": [\n          feature([\n            m3,\n            add(m3,minus(m1, m2)),\n          ]),\n          feature([\n            m0,\n            add(m0,minus(m2, m1)),\n          ]),\n          feature([\n            m1,\n            add(m1,minus(m3, m0)),\n          ]),\n          feature([\n            m2,\n            add(m2,minus(m0, m3)),\n          ]),\n        ]\n      });\n    }\n\n    this.setupMap = () => {\n      map = this.map\n\n      if (debugMode) {\n        // Markers are useful for debugging\n        this.markers = [\n          new mapboxgl.Marker({\n            draggable: true,\n            color: '#003262',\n          }),\n          new mapboxgl.Marker({\n            draggable: true,\n            color: '#3B7EA1',\n          }),\n          new mapboxgl.Marker({\n            draggable: true,\n            color: '#FDB515',\n          }),\n          new mapboxgl.Marker({\n            draggable: true,\n            color: '#C4820E',\n          }),\n        ];\n\n        this.markers[0].on('drag',    () => this.updateScan(0, this.markers[0].getLngLat()));\n        this.markers[1].on('drag',    () => this.updateScan(1, this.markers[1].getLngLat()));\n        this.markers[2].on('drag',    () => this.updateScan(2, this.markers[2].getLngLat()));\n        this.markers[3].on('drag',    () => this.updateScan(3, this.markers[3].getLngLat()));\n\n        this.markers[0].on('dragend', () => this.updateScan(0, this.markers[0].getLngLat(), true));\n        this.markers[1].on('dragend', () => this.updateScan(1, this.markers[1].getLngLat(), true));\n        this.markers[2].on('dragend', () => this.updateScan(2, this.markers[2].getLngLat(), true));\n        this.markers[3].on('dragend', () => this.updateScan(3, this.markers[3].getLngLat(), true));\n\n        // Have to hardcode in or else weird behavior happens\n        this.markers[0].setLngLat(LngLat(-122.27246573870457,37.87077721085865)).addTo(map);\n        this.markers[1].setLngLat(LngLat(-122.25556530361206,37.88257575090472)).addTo(map);\n        this.markers[2].setLngLat(LngLat(-122.24414248656030,37.87273856363721)).addTo(map);\n        this.markers[3].setLngLat(LngLat(-122.26074299964147,37.86081212396496)).addTo(map);\n\n        map.addSource('borderTB', {\n          \"type\": \"geojson\",\n          \"data\": {\n            \"type\": \"Feature\",\n            \"properties\": {},\n            \"geometry\": {\n              \"type\": \"LineString\",\n              \"coordinates\": [\n              ]\n            }\n          }\n        });\n        map.addLayer({\n          \"id\": \"borderTB\",\n          \"type\": \"line\",\n          \"source\": \"borderTB\",\n          \"paint\": {\n            \"line-color\": \"#003262\",\n            \"line-opacity\": 0.5,\n            \"line-width\": 4\n          }\n        });\n        map.addSource('borderLR', {\n          \"type\": \"geojson\",\n          \"data\": {\n            \"type\": \"Feature\",\n            \"properties\": {},\n            \"geometry\": {\n              \"type\": \"LineString\",\n              \"coordinates\": [\n              ]\n            }\n          }\n        });\n        map.addLayer({\n          \"id\": \"borderLR\",\n          \"type\": \"line\",\n          \"source\": \"borderLR\",\n          \"paint\": {\n            \"line-color\": \"#FDB515\",\n            \"line-opacity\": 0.5,\n            \"line-width\": 4\n          }\n        });\n        this.calculateBorders();\n      }\n\n      map.on('click', (e) => {\n        debug(`${e.lngLat}`);\n      });\n      map.on('mousedown', () => {\n        if (this.imageOverlayAdded) {\n          map.setPaintProperty('imageOverlay', 'raster-opacity', 0.4)\n        }\n      });\n      map.on('mouseup', () => {\n        if (this.imageOverlayAdded) {\n          map.setPaintProperty('imageOverlay', 'raster-opacity', 0.8)\n        }\n      });\n      setTimeout(() => {\n        this.setImage('1979-baldwin');\n      }, 1000)\n\n      // Make things easier for a noob like me who uses Google Maps\n      map.boxZoom.disable();\n      map.addControl(new mapboxgl.NavigationControl());\n      map.addControl(new mapboxgl.AttributionControl({\n        compact: true,\n      }), 'top-left');\n    }\n  }\n\n  componentDidMount() {\n    // mapboxgl.accessToken = null; // This app does not use mapbox maps. Only the JS library which is free\n    var map = new mapboxgl.Map(mapboxOptions);\n    this.map = map;\n    window.map = map;\n\n    this.map.on('load', this.setupMap);\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"map\"></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}