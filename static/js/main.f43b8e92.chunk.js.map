{"version":3,"sources":["App.js","debug.js","serviceWorker.js","index.js"],"names":["mapboxgl","window","LngLat","lng","lat","scans","1910","url","corners","fullUrl","partUrl","mapboxOptions","container","zoom","minZoom","maxZoom","style","version","sources","raster-tiles","type","tiles","tileSize","layers","id","source","minzoom","maxzoom","customAttribution","center","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","imageOverlayAdded","state","lastMarkerUpdate","currentOverlaySourceName","addSource","scanId","coordinates","map","setImageOverlay","addLayer","paint","raster-opacity","setImage","scan","Error","currentSource","markers","setLngLat","updateCorners","force","Date","now","setTimeout","getSource","setCoordinates","console","log","concat","updateScan","cornerId","lngLat","getLngLat","_this2","Map","Marker","draggable","on","addTo","e","_console","_len","arguments","length","args","Array","_key","apply","debug","boxZoom","disable","addControl","NavigationControl","AttributionControl","compact","react_default","a","createElement","className","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f43b8e92.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport debug from './debug';\nimport './mapbox-gl.css';\nconst mapboxgl = window.mapboxgl\n\n\n\n// Ohhh ... HAHAHHA ... funny ... :( lat and lng are \"inverted\" in mapbox\n// Always use these utility functions\nconst LatLng = (lat, lng) => [lng, lat];\nconst LngLat = (lng, lat) => [lng, lat];\n\n\nlet scans = {\n  '1910': {url:'./compressed-maps/1910-smaller.jpg', corners: [[-122.25368381624293,37.87666271788129], [-122.25205864680986,37.8690054551667], [-122.26567321115618,37.867273073426304], [-122.26725246910868,37.87479602627526],]},\n};\n\nconst fullUrl = partUrl => partUrl;\n\n\n// Thank you, Earth Science & Map Library <3\nconst McCone_Hall = LatLng(37.873931, -122.259491)\n\nconst mapboxOptions = {\n  container: 'map', // container id\n  zoom: 13,\n  minZoom: 11,\n  maxZoom: 21,\n  style: {\n    \"version\": 8,\n    \"sources\": {\n      \"raster-tiles\": {\n        \"type\": \"raster\",\n        \"tiles\": [\n          \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n          // \"http://b.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        ],\n        \"tileSize\": 128\n      }\n    },\n    \"layers\": [{\n      \"id\": \"simple-tiles\",\n      \"type\": \"raster\",\n      \"source\": \"raster-tiles\",\n      \"minzoom\": 0,\n      \"maxzoom\": 24\n    }]\n  },\n\n  // maxBounds: [LngLat(-122.552, 37.673), LngLat(-122.0467, 37.987)],\n\n  // Attribution from: http://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer?f=pjson\n  customAttribution: 'Satellite map source: Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community',\n  center: McCone_Hall,\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.imageOverlayAdded = false;\n    this.sources = {}; // Doesn't actually get you the source\n    this.state = {\n    }\n    this.lastMarkerUpdate = 0;\n\n    this.currentOverlaySourceName = null;\n\n\n    this.addSource = (scanId, coordinates) => {\n      if (!this.sources[scanId]) {\n        this.sources[scanId] = this.map.addSource(scanId, {\n          type: 'image',\n          url: fullUrl(scans[scanId].url),\n          coordinates: scans[scanId].corners,\n        });\n      }\n    }\n\n    this.setImageOverlay = (scanId) => {\n      if (!this.imageOverlayAdded) {\n        this.imageOverlayAdded = true;\n        this.currentOverlaySourceName = scanId;\n\n        this.map.addLayer({\n          \"id\": \"imageOverlay\",\n          \"source\": scanId,\n          \"type\": \"raster\",\n          \"paint\": {\n            \"raster-opacity\": 0.8\n          },\n        });\n      } else {\n        // this.map.addLayer({\n        //   \"id\": \"imageOverlay\",\n        //   \"source\": \"myImageSource\",\n        //   \"type\": \"raster\",\n        //   \"paint\": {\n        //     \"raster-opacity\": 0.95\n        //   },\n        // });\n      }\n    }\n\n    this.setImage = scanId => {\n      const scan = scans[scanId];\n      if (!scan) {\n        throw new Error('Scan doesnt exist:', scanId);\n      }\n      this.currentSource = scanId;\n      this.addSource(scanId, scan.corners);\n      this.setImageOverlay(scanId);\n\n      this.markers[0].setLngLat(scan.corners[0])\n      this.markers[1].setLngLat(scan.corners[1])\n      this.markers[2].setLngLat(scan.corners[2])\n      this.markers[3].setLngLat(scan.corners[3])\n    }\n\n    this.updateCorners = (force) => {\n      if (this.currentSource == null) {\n        return;\n      }\n\n      // Debounce or else we will consistently crash\n      if (!force && Date.now() - this.lastMarkerUpdate < 500) {\n        setTimeout(this.updateCorners, Date.now() - this.lastMarkerUpdate + 2);\n        return;\n      }\n      this.lastMarkerUpdate = Date.now();\n\n      let source = this.map.getSource(this.currentOverlaySourceName);\n      let scan = scans[this.currentOverlaySourceName];\n\n      source.setCoordinates(scan.corners);\n      console.log(`'${this.currentOverlaySourceName}': {url:'${scan.url}', corners: [[${scan.corners[0][0]},${scan.corners[0][1]}], [${scan.corners[1][0]},${scan.corners[1][1]}], [${scan.corners[2][0]},${scan.corners[2][1]}], [${scan.corners[3][0]},${scan.corners[3][1]}],]},`)\n    }\n    this.updateScan = (cornerId, lngLat, force) => {\n      if (this.currentSource == null) {\n        return;\n      }\n\n      let source = this.map.getSource(this.currentOverlaySourceName);\n      let scan = scans[this.currentOverlaySourceName];\n      if (!source || !scan) {\n        console.log('Something was empty',source,scan)\n        return;\n      }\n\n      scan.corners[0] = [this.markers[0].getLngLat().lng, this.markers[0].getLngLat().lat];\n      scan.corners[1] = [this.markers[1].getLngLat().lng, this.markers[1].getLngLat().lat];\n      scan.corners[2] = [this.markers[2].getLngLat().lng, this.markers[2].getLngLat().lat];\n      scan.corners[3] = [this.markers[3].getLngLat().lng, this.markers[3].getLngLat().lat];\n    }\n  }\n\n  componentDidMount() {\n    // mapboxgl.accessToken = null; // This app does not use mapbox maps. Only the JS library which is free\n    var map = new mapboxgl.Map(mapboxOptions);\n    this.map = map;\n\n    // Markers are useful for debugging\n    this.markers = [\n      new mapboxgl.Marker({\n        draggable: true,\n      }),\n      new mapboxgl.Marker({\n        draggable: true\n      }),\n      new mapboxgl.Marker({\n        draggable: true\n      }),\n      new mapboxgl.Marker({\n        draggable: true\n      }),\n    ];\n\n    this.markers[0].on('drag',    () => this.updateScan(0, this.markers[0].getLngLat()));\n    this.markers[1].on('drag',    () => this.updateScan(1, this.markers[1].getLngLat()));\n    this.markers[2].on('drag',    () => this.updateScan(2, this.markers[2].getLngLat()));\n    this.markers[3].on('drag',    () => this.updateScan(3, this.markers[3].getLngLat()));\n\n    this.markers[0].on('dragend', () => this.updateScan(0, this.markers[0].getLngLat(), true));\n    this.markers[1].on('dragend', () => this.updateScan(1, this.markers[1].getLngLat(), true));\n    this.markers[2].on('dragend', () => this.updateScan(2, this.markers[2].getLngLat(), true));\n    this.markers[3].on('dragend', () => this.updateScan(3, this.markers[3].getLngLat(), true));\n\n    // Have to hardcode in or else weird behavior happens\n    this.markers[0].setLngLat(LngLat(-122.2530116318478, 37.81644774444351)).addTo(map);\n    this.markers[1].setLngLat(LngLat(-122.3771954185537, 37.88231391877983)).addTo(map);\n    this.markers[2].setLngLat(LngLat(-122.2526683090948, 37.89885189380466)).addTo(map);\n    this.markers[3].setLngLat(LngLat(-122.2530116318478, 37.81644774444351)).addTo(map);\n\n    map.on('click', (e) => {\n      debug(`${e.lngLat}`);\n    });\n    setTimeout(() => {\n      this.setImage('1910');\n    }, 1000)\n\n    // Make things easier for a noob like me who uses Google Maps\n    map.boxZoom.disable();\n    map.addControl(new mapboxgl.NavigationControl());\n    map.addControl(new mapboxgl.AttributionControl({\n      compact: true,\n    }), 'top-left');\n\n    window.map = map;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"map\"></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default function(...args) {\n  // Explicitly say [Local debugger] to let people know this is just for debugging and not tracking\n  console.log('[Local debugger]',...args);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}